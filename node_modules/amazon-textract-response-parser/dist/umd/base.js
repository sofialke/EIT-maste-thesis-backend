(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modalAvg = exports.getIterable = exports.DocumentMetadata = exports.ApiBlockWrapper = exports.ApiObjectWrapper = void 0;
    class ApiObjectWrapper {
        constructor(dict) {
            this._dict = dict;
        }
        get dict() {
            return this._dict;
        }
    }
    exports.ApiObjectWrapper = ApiObjectWrapper;
    class ApiBlockWrapper extends ApiObjectWrapper {
        get id() {
            return this._dict.Id;
        }
        get blockType() {
            return this._dict.BlockType;
        }
    }
    exports.ApiBlockWrapper = ApiBlockWrapper;
    class DocumentMetadata extends ApiObjectWrapper {
        get nPages() {
            var _a;
            return ((_a = this._dict) === null || _a === void 0 ? void 0 : _a.Pages) || 0;
        }
    }
    exports.DocumentMetadata = DocumentMetadata;
    function getIterable(collectionFetcher) {
        const getIterator = () => {
            const collection = collectionFetcher();
            let ixItem = 0;
            return {
                next: () => {
                    return ixItem < collection.length
                        ? {
                            done: false,
                            value: collection[ixItem++],
                        }
                        : {
                            done: true,
                            value: undefined,
                        };
                },
            };
        };
        return {
            [Symbol.iterator]: getIterator,
        };
    }
    exports.getIterable = getIterable;
    function modalAvg(arr) {
        const freqs = {};
        for (const item of arr) {
            if (freqs[item]) {
                ++freqs[item].freq;
            }
            else {
                freqs[item] = { value: item, freq: 1 };
            }
        }
        let maxFreq = 0;
        let mode = null;
        for (const item in freqs) {
            if (freqs[item].freq > maxFreq) {
                maxFreq = freqs[item].freq;
                mode = freqs[item].value;
            }
        }
        return mode;
    }
    exports.modalAvg = modalAvg;
});
//# sourceMappingURL=base.js.map