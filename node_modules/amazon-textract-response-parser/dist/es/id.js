import { ApiObjectWrapper, getIterable } from "./base";
export var IdFieldType;
(function (IdFieldType) {
    IdFieldType["FirstName"] = "FIRST_NAME";
    IdFieldType["LastName"] = "LAST_NAME";
    IdFieldType["MiddleName"] = "MIDDLE_NAME";
    IdFieldType["Suffix"] = "SUFFIX";
    IdFieldType["AddressCity"] = "CITY_IN_ADDRESS";
    IdFieldType["AddressZipCode"] = "ZIP_CODE_IN_ADDRESS";
    IdFieldType["AddressState"] = "STATE_IN_ADDRESS";
    IdFieldType["StateName"] = "STATE_NAME";
    IdFieldType["DocumentNumber"] = "DOCUMENT_NUMBER";
    IdFieldType["ExpirationDate"] = "EXPIRATION_DATE";
    IdFieldType["DateOfBirth"] = "DATE_OF_BIRTH";
    IdFieldType["DateOfIssue"] = "DATE_OF_ISSUE";
    IdFieldType["IdType"] = "ID_TYPE";
    IdFieldType["Endorsements"] = "ENDORSEMENTS";
    IdFieldType["Veteran"] = "VETERAN";
    IdFieldType["Restrictions"] = "RESTRICTIONS";
    IdFieldType["Class"] = "CLASS";
    IdFieldType["Address"] = "ADDRESS";
    IdFieldType["County"] = "COUNTY";
    IdFieldType["PlaceOfBirth"] = "PLACE_OF_BIRTH";
    IdFieldType["Other"] = "OTHER";
})(IdFieldType || (IdFieldType = {}));
export var IdFieldValueType;
(function (IdFieldValueType) {
    IdFieldValueType["Date"] = "DATE";
    IdFieldValueType["Other"] = "OTHER";
})(IdFieldValueType || (IdFieldValueType = {}));
export var IdDocumentType;
(function (IdDocumentType) {
    IdDocumentType["DrivingLicense"] = "DRIVER LICENSE FRONT";
    IdDocumentType["Passport"] = "PASSPORT";
    IdDocumentType["Other"] = "OTHER";
})(IdDocumentType || (IdDocumentType = {}));
export class IdDocumentField extends ApiObjectWrapper {
    constructor(dict, parentDocument = undefined) {
        super(dict);
        this._parentDocument = parentDocument;
    }
    get isValueNormalized() {
        var _a, _b;
        return typeof ((_b = (_a = this._dict.ValueDetection) === null || _a === void 0 ? void 0 : _a.NormalizedValue) === null || _b === void 0 ? void 0 : _b.Value) !== "undefined";
    }
    get fieldTypeRaw() {
        var _a;
        return (_a = this._dict.Type) === null || _a === void 0 ? void 0 : _a.Text;
    }
    get fieldType() {
        var _a;
        const typeDict = this._dict.Type;
        const textractFieldType = (((_a = typeDict === null || typeDict === void 0 ? void 0 : typeDict.NormalizedValue) === null || _a === void 0 ? void 0 : _a.Value) || (typeDict === null || typeDict === void 0 ? void 0 : typeDict.Text) || "").toUpperCase();
        if (Object.values(IdFieldType).some((t) => t === textractFieldType)) {
            return textractFieldType;
        }
        else {
            return IdFieldType.Other;
        }
    }
    get parentDocument() {
        return this._parentDocument;
    }
    get value() {
        var _a;
        const detection = this._dict.ValueDetection;
        return ((_a = detection === null || detection === void 0 ? void 0 : detection.NormalizedValue) === null || _a === void 0 ? void 0 : _a.Value) || (detection === null || detection === void 0 ? void 0 : detection.Text) || "";
    }
    get valueConfidence() {
        var _a;
        return ((_a = this._dict.ValueDetection) === null || _a === void 0 ? void 0 : _a.Confidence) || 0;
    }
    get valueRaw() {
        var _a;
        return (_a = this._dict.ValueDetection) === null || _a === void 0 ? void 0 : _a.Text;
    }
    get valueType() {
        var _a, _b;
        let rawValueType = (_b = (_a = this._dict.ValueDetection) === null || _a === void 0 ? void 0 : _a.NormalizedValue) === null || _b === void 0 ? void 0 : _b.ValueType;
        if (rawValueType)
            rawValueType = rawValueType.toUpperCase();
        if (rawValueType === "DATE") {
            return "DATE";
        }
        else {
            return "OTHER";
        }
    }
    str() {
        return `${this.fieldType}: ${this.value} (${this.valueConfidence.toFixed(1)}% Confidence)`;
    }
}
export class IdDocument extends ApiObjectWrapper {
    constructor(dict, parentResult = undefined) {
        super(dict);
        this._parentResult = parentResult;
        this._fields = (dict.IdentityDocumentFields || []).map((d) => new IdDocumentField(d, this));
        this._fieldsByNormalizedType = {};
        this._fields.forEach((field) => {
            this._fieldsByNormalizedType[field.fieldType] = field;
        });
    }
    get index() {
        return this._dict.DocumentIndex;
    }
    get idType() {
        var _a;
        const idTypeValue = (_a = this.getFieldByType(IdFieldType.IdType)) === null || _a === void 0 ? void 0 : _a.value;
        if (Object.values(IdDocumentType).some((t) => t === idTypeValue)) {
            return idTypeValue;
        }
        else {
            return IdDocumentType.Other;
        }
    }
    get nFields() {
        return this._fields.length;
    }
    get parentCollection() {
        return this._parentResult;
    }
    getFieldByType(fieldType) {
        return this._fieldsByNormalizedType[fieldType];
    }
    iterFields() {
        return getIterable(() => this.listFields());
    }
    listFields() {
        return this._fields.slice();
    }
    str() {
        const fldStr = this._fields.map((f) => f.str()).join("\n");
        return `==========\nIdentity Document ${this.index} (${this.idType})\n----------\n${fldStr}\n==========`;
    }
}
export class TextractIdentity extends ApiObjectWrapper {
    constructor(dict) {
        super(dict);
        this._documents = (dict.IdentityDocuments || []).map((docDict) => new IdDocument(docDict, this));
    }
    get modelVersion() {
        return this._dict.AnalyzeIDModelVersion;
    }
    get nDocuments() {
        return this._documents.length;
    }
    get nPages() {
        var _a;
        return ((_a = this._dict.DocumentMetadata) === null || _a === void 0 ? void 0 : _a.Pages) || 0;
    }
    getDocAtIndex(index) {
        if (!(index >= 0 && index < this._documents.length)) {
            throw new Error(`Document index ${index} must be between 0 and ${this._documents.length}`);
        }
        return this._documents[index];
    }
    iterDocuments() {
        return getIterable(() => this.listDocuments());
    }
    listDocuments() {
        return this._documents.slice();
    }
    str() {
        return this._documents.map((d) => d.str()).join("\n\n");
    }
}
//# sourceMappingURL=id.js.map