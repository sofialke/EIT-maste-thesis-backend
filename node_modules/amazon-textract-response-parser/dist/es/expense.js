import { ApiObjectWrapper, DocumentMetadata, getIterable } from "./base";
import { Geometry } from "./geometry";
export class ExpenseComponentDetection extends ApiObjectWrapper {
    constructor(dict, parentField) {
        super(dict);
        this._parentField = parentField;
        this._geometry = dict.Geometry ? new Geometry(dict.Geometry, this) : undefined;
    }
    get confidence() {
        return this._dict.Confidence;
    }
    set confidence(newVal) {
        this._dict.Confidence = newVal;
    }
    get geometry() {
        return this._geometry;
    }
    get parentField() {
        return this._parentField;
    }
    get text() {
        return this._dict.Text;
    }
    set text(newVal) {
        this._dict.Text = newVal;
    }
}
export class ExpenseFieldType extends ApiObjectWrapper {
    constructor(dict, parentField) {
        super(dict);
        this._parentField = parentField;
    }
    get confidence() {
        return this._dict.Confidence;
    }
    set confidence(newVal) {
        this._dict.Confidence = newVal;
    }
    get parentField() {
        return this._parentField;
    }
    get text() {
        return this._dict.Text;
    }
    set text(newVal) {
        this._dict.Text = newVal;
    }
}
export class ExpenseField extends ApiObjectWrapper {
    constructor(dict, parent) {
        super(dict);
        this._parent = parent;
        this._fieldType = new ExpenseFieldType(dict.Type, this);
        this._label = dict.LabelDetection ? new ExpenseComponentDetection(dict.LabelDetection, this) : null;
        this._value = new ExpenseComponentDetection(dict.ValueDetection, this);
    }
    get fieldType() {
        return this._fieldType;
    }
    get label() {
        return this._label;
    }
    get pageNumber() {
        return this._dict.PageNumber;
    }
    get parent() {
        return this._parent;
    }
    get value() {
        return this._value;
    }
}
export class ExpenseLineItem extends ApiObjectWrapper {
    constructor(dict, parentGroup) {
        super(dict);
        this._parentGroup = parentGroup;
        this._fields = (dict.LineItemExpenseFields || []).map((d) => new ExpenseField(d, this));
    }
    get nFields() {
        return this._fields.length;
    }
    get parentGroup() {
        return this._parentGroup;
    }
    iterFields() {
        return getIterable(() => this._fields);
    }
    listFields() {
        return this._fields.slice();
    }
    getFieldByType(fieldType) {
        const results = this.searchFieldsByType(fieldType);
        return results.length ? results[0] : null;
    }
    searchFieldsByType(fieldType) {
        return this._fields.filter((f) => f.fieldType.text == fieldType);
    }
}
export class ExpenseLineItemGroup extends ApiObjectWrapper {
    constructor(dict, parentDoc) {
        super(dict);
        this._parentDoc = parentDoc;
        this._lineItems = (dict.LineItems || []).map((d) => new ExpenseLineItem(d, this));
    }
    get index() {
        return this._dict.LineItemGroupIndex;
    }
    get nLineItems() {
        return this._lineItems.length;
    }
    get parentDoc() {
        return this._parentDoc;
    }
    iterLineItems() {
        return getIterable(() => this._lineItems);
    }
    listLineItems() {
        return this._lineItems.slice();
    }
}
export class ExpenseDocument extends ApiObjectWrapper {
    constructor(dict, parentExpense = null) {
        super(dict);
        this._parentExpense = parentExpense;
        this._lineItemGroups = (dict.LineItemGroups || []).map((d) => new ExpenseLineItemGroup(d, this));
        this._summaryFields = (dict.SummaryFields || []).map((d) => new ExpenseField(d, this));
    }
    get index() {
        return this._dict.ExpenseIndex;
    }
    get nLineItemGroups() {
        return this._lineItemGroups.length;
    }
    get nSummaryFields() {
        return this._summaryFields.length;
    }
    get parentExpense() {
        return this._parentExpense;
    }
    getSummaryFieldByType(fieldType) {
        const results = this.searchSummaryFieldsByType(fieldType);
        return results.length ? results[0] : null;
    }
    searchSummaryFieldsByType(fieldType) {
        return this._summaryFields.filter((f) => f.fieldType.text == fieldType);
    }
    iterLineItemGroups() {
        return getIterable(() => this._lineItemGroups);
    }
    iterSummaryFields() {
        return getIterable(() => this._summaryFields);
    }
    listLineItemGroups() {
        return this._lineItemGroups.slice();
    }
    listSummaryFields() {
        return this._summaryFields.slice();
    }
}
export class TextractExpense extends ApiObjectWrapper {
    constructor(textractResult) {
        super(textractResult);
        if (!textractResult.ExpenseDocuments) {
            throw new Error("Input doesn't seem like a Textract expense analysis result: missing property 'ExpenseDocuments'");
        }
        this._metadata = new DocumentMetadata(textractResult.DocumentMetadata);
        this._docs = (textractResult.ExpenseDocuments || []).map((d) => new ExpenseDocument(d, this));
    }
    get metadata() {
        return this._metadata;
    }
    get nDocs() {
        return this._docs.length;
    }
    iterDocs() {
        return getIterable(() => this._docs);
    }
    listDocs() {
        return this._docs.slice();
    }
}
//# sourceMappingURL=expense.js.map